/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.3/userguide/tutorial_java_projects.html
 */

buildscript {
  repositories {
    mavenCentral()
    maven {
      setUrl("https://plugins.gradle.org/m2/")
    }
  }
  dependencies {
    classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0'
  }
}

plugins {
  // Apply the java plugin to add support for Java
  id 'java'

  // Apply the gradle plugin to add support for Gradle
  id 'groovy'

  // Apply the application plugin to add support for building a CLI application.
  id 'application'

  // JavaFX
  id "org.openjfx.javafxplugin" version "0.0.10"

  // Spotless for code formatting
  id "com.diffplug.spotless" version "6.0.0"

  // Code coverage
  id 'jacoco'

  id "org.jetbrains.kotlin.jvm" version "1.6.0"
}

apply plugin: 'org.junit.platform.gradle.plugin'

// 変数定義

// ソースコードに埋め込むコミットハッシュ値。デフォルト値はdevで、CIでのビルド時
// に値を差し替える。
def commitHash = 'dev'

def VERSION_SOURCE_FILE = 'application.properties'
def SRC_FILE = 'template/' + VERSION_SOURCE_FILE
def DST_DIR = 'src/main/resources/com/jiro4989/tkfm/properties'
def DST_FILE = DST_DIR + '/' + VERSION_SOURCE_FILE

def LIB_DIR = './lib'

def APP_MODS = [
  'javafx.base',
  'javafx.controls',
  'javafx.swing',
  'javafx.graphics',
  'javafx.fxml',
]

def jmodsDir = './jmods/javafx-jmods-11.0.2'
def CUSTOM_JRE_DIR = 'jre'

repositories {
  mavenCentral()
}

dependencies {
  // This dependency is used by the application.
  implementation 'com.google.guava:guava:28.2-jre'

  // Use JUnit test framework
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
  testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
  testImplementation 'org.junit.jupiter:junit-jupiter-params:5.6.2'
  testImplementation 'org.junit.platform:junit-platform-launcher:1.6.2'
  testImplementation "org.testfx:testfx-junit5:4.0.16-alpha"

  // JavaFX
  implementation "org.openjfx:javafx-fxml:16"
  implementation "org.openjfx:javafx-base:16"
  implementation "org.openjfx:javafx-controls:16"
  implementation "org.openjfx:javafx-graphics:16"
  implementation "org.openjfx:javafx-swing:16"

  implementation platform('org.jetbrains.kotlin:kotlin-bom')
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
  testImplementation "org.jetbrains.kotlin:kotlin-test"
  testImplementation 'org.jetbrains.kotlin:kotlin-test-junit'
}

sourceCompatibility = 16
targetCompatibility = 16

application {
  // Define the main class for the application.
  getMainClass().set('com.jiro4989.tkfm.Main')
}

compileJava {
  options.encoding = 'UTF-8'
}

compileKotlin {
  kotlinOptions.jvmTarget = "16"
}

compileTestKotlin {
  kotlinOptions.jvmTarget = "16"
}

javafx {
  modules = [
    'javafx.controls',
    'javafx.fxml',
    'javafx.swing'
  ]
}

jar {
  manifest {
    attributes 'Main-Class': 'com.jiro4989.tkfm.Main'
  }

  archiveBaseName = 'tkfm'

  from {
    configurations.compileClasspath.collect {
      it.isDirectory() ? it : zipTree(it)
    }
  }
  duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

jacoco {
  applyTo junitPlatformTest
}

tasks.register('junitPlatformJacocoReport', JacocoReport) {
  group = "Verification"
  description = "Jacocoを使ってテストのレポートを取得する"

  sourceSets sourceSets.main
  executionData junitPlatformTest
}

junitPlatformTest {
  jacoco {
    destinationFile = file("${buildDir}/jacoco/test.exec")
  }
}

jacocoTestReport {
  reports {
    xml.required = true
    html.required = true
  }
}

spotless {
  java {
    googleJavaFormat('1.13.0')

    trimTrailingWhitespace()
    endWithNewline()
    removeUnusedImports()
  }

  kotlin {
    ktfmt('0.15')
    //diktat('0.4.0')
  }

  groovyGradle {
    target '*.gradle'
    greclipse().configFile("$rootDir/greclipse.properties")
  }
}

version = 'dev'
if (project.hasProperty('CI_VERSION')) {
  version = CI_VERSION
}
if (project.hasProperty('CI_COMMIT_HASH')) {
  commitHash = CI_COMMIT_HASH
}


// Version.javaにバージョン番号とコミットハッシュを埋め込んでコピーする。
//
// 環境変数を指定せずにビルドするとdevがデフォルトでセットされる。
// CIでのビルド時にはタグ番号とコミットハッシュが埋め込まれる。
// こうすることでタグ番号の二重管理を防ぐことができる。
tasks.register('versionSet', Copy) {
  group = "Build"
  description = "ソースコードにビルド時のタグバージョンとコミットハッシュ値を埋め込む"

  from SRC_FILE
  into DST_DIR
  expand(version: version, commitHash: commitHash)

  doFirst {
    delete DST_FILE
  }
}

tasks.register('cleanDependencies') {
  group = "Build"
  description = "依存ライブラリを削除する"

  doLast {
    delete LIB_DIR
  }
}

// dependenciesで取得したjarファイルをlib配下にコピーする。
//
// runAppで実行するときにライブラリのパスを指定するために使用する。
tasks.register('dumpDependencies') {
  group = "Build"
  description = "依存ライブラリjarをlib配下にコピーする"

  doLast {
    configurations.compileClasspath.each {
      def jarFile = it.absolutePath
      copy {
        from jarFile
        into LIB_DIR
      }
    }
  }
}

tasks.register('runApp', Exec) {
  group = "Application"
  description = "アプリケーションを起動する"

  commandLine 'java',
    '--module-path', LIB_DIR,
    '--add-modules', APP_MODS.join(','),
    '-jar', 'build/libs/tkfm-dev.jar'
}

if (project.hasProperty('CI_JMODS_DIR')) {
  jmodsDir = CI_JMODS_DIR
}

tasks.register('cleanCustomJRE') {
  group = "Build"
  description = "生成したカスタムJREを削除する"

  doLast {
    delete CUSTOM_JRE_DIR
  }
}

// カスタムJREを作成する。
tasks.register('jlink', Exec) {
  group = "Build"
  description = "jlinkを使ってカスタムJREを作成する"

  commandLine 'jlink',
    '--module-path', jmodsDir,
    '--add-modules', APP_MODS.join(','),
    '--compress=2',
    '--output', CUSTOM_JRE_DIR
}

// 実行順序の明示
spotlessApply.dependsOn(['clean'])
versionSet.dependsOn(['spotlessApply'])
test.dependsOn('spotlessApply')
compileJava.dependsOn(['versionSet'])
compileKotlin.dependsOn(['versionSet'])
jacocoTestReport.dependsOn(['test'])

dumpDependencies.dependsOn(['cleanDependencies'])
runApp.dependsOn(['dumpDependencies'])

jlink.dependsOn(['cleanCustomJRE'])
