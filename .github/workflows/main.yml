# ビルド、テスト、リリースを行う
name: build

on:
  push:
    paths-ignore:
      - 'LICENSE'
      - 'README.*'
      - 'docs/*'
  release:
    types: [published]

env:
  APP_NAME: 'tkfm'
  JAVA_VERSION: '14'
  JAVAFX_VERSION: '14.0.1'

jobs:
  before:
    runs-on: ubuntu-latest
    if: "! contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - run: echo "${{ github.event.head_commit.message }}"

  test:
    runs-on: ubuntu-latest
    needs: before
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
          java-package: jdk
          architecture: x64
      - name: Install xvfb
        run: sudo apt install -y xvfb
      - name: Test
        run: xvfb-run ./gradlew test
      - name: Send coverage report
        run: bash <(curl -s https://codecov.io/bash)

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - windows-latest
          - macOS-latest
          - ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-java@v1
        with:
          java-version: '14'
          java-package: jdk
          architecture: x64
      - name: Build
        run: ORG_GRADLE_PROJECT_CI_VERSION="${GITHUB_REF##*/}" ORG_GRADLE_PROJECT_CI_COMMIT_HASH="$(git rev-parse HEAD)" ./gradlew build -x test
        shell: bash

      - name: Create artifact
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          case ${{ matrix.os }} in
            windows-latest)
              os_name=windows
              ;;
            macOS-latest)
              os_name=osx
              ;;
            ubuntu-latest)
              os_name=linux
              ;;
          esac

          echo "os_name = $os_name"
          mkdir -p jmods/${os_name}
          curl -o jmods/${os_name}/jmods.zip -sSL https://download2.gluonhq.com/openjfx/${{ env.JAVAFX_VERSION }}/openjfx-${{ env.JAVAFX_VERSION }}_${os_name}-x64_bin-jmods.zip
          pushd jmods/${os_name}
          unzip jmods.zip
          popd
          ORG_GRADLE_PROJECT_CI_JMODS_DIR="jmods/${os_name}/javafx-jmods-${{ env.JAVAFX_VERSION }}" ./gradlew jlink
          mkdir ${{ env.APP_NAME }}_${os_name}
          cp -r .github/dist/* LICENSE build/libs/${{ env.APP_NAME }}-*.jar jre ${{ env.APP_NAME }}_${os_name}/
          mkdir dist
          case "$os_name" in
            windows)
              sed -i "s/{tag}/${GITHUB_REF##*/}/g" ${{ env.APP_NAME }}_${os_name}/${{ env.APP_NAME }}.bat
              7z a ${{ env.APP_NAME }}_${os_name}.zip ${{ env.APP_NAME }}_${os_name}
              mv ${{ env.APP_NAME }}_${os_name}.zip dist/
              ;;
            osx)
              sed -i '' "s/{tag}/${GITHUB_REF##*/}/g" ${{ env.APP_NAME }}_${os_name}/${{ env.APP_NAME }}
              tar czf ${{ env.APP_NAME }}_${os_name}.tar.gz ${{ env.APP_NAME }}_${os_name}
              mv ${{ env.APP_NAME }}_${os_name}.tar.gz dist/
              ;;
            linux)
              sed -i "s/{tag}/${GITHUB_REF##*/}/g" ${{ env.APP_NAME }}_${os_name}/${{ env.APP_NAME }}
              tar czf ${{ env.APP_NAME }}_${os_name}.tar.gz ${{ env.APP_NAME }}_${os_name}
              mv ${{ env.APP_NAME }}_${os_name}.tar.gz dist/
              ;;
          esac
        shell: bash
      - name: Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: 'dist/${{ env.APP_NAME }}_*.*'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-tag-draft:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    needs: build
    steps:
      - uses: release-drafter/release-drafter@v5.3.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
